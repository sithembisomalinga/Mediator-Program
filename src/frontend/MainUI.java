package frontend;

import backend.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Image;
import java.io.*;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.NoSuchElementException;
import java.util.Scanner;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.*;

/**
 * Deals with the interfacing between the table and the user.
 * 
 * @author SITHEMBISO MALINGA
 */
public class MainUI extends javax.swing.JFrame {

    private boolean hints;
    private boolean appearance; //false is normal dark mode, true is light mode
    private JTable table; //due to the nature of creating custom cell renderers, a new table is made

    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
        jTextFieldID.setVisible(false);
        loadList();
        updatePercentage();
        jFolderList.setSelectedIndex(0);
        loadSettings();
        recolourTheme();
        selectionList(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar2 = new javax.swing.JProgressBar();
        jContentPane = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jFolderList = new javax.swing.JList<>();
        jGroupHeader1 = new javax.swing.JPanel();
        jProgressBar = new javax.swing.JProgressBar();
        jTextFieldSearchBar = new javax.swing.JTextField();
        jComboBoxSearchType = new javax.swing.JComboBox<>();
        jbtnSearch = new javax.swing.JButton();
        jbtnAddGroup = new javax.swing.JButton();
        jbtnRenameGroup = new javax.swing.JButton();
        jbtnRemoveGroup = new javax.swing.JButton();
        jbtnAddEntry = new javax.swing.JButton();
        jbtnEditEntry = new javax.swing.JButton();
        jbtnRemoveEntry = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane3 = new javax.swing.JScrollPane();
        jRecTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jbtnRefresh = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabelGroupName = new javax.swing.JLabel();
        jTextFieldID = new javax.swing.JTextField();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemExport = new javax.swing.JMenuItem();
        jMenuItemRefresh = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemNewEntry = new javax.swing.JMenuItem();
        jMenuItemEditEntry = new javax.swing.JMenuItem();
        jMenuItemRemoveEntry = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemNewGroup = new javax.swing.JMenuItem();
        jMenuItemRenameGroup = new javax.swing.JMenuItem();
        jMenuItemRemoveGroup = new javax.swing.JMenuItem();
        jMenuAppear = new javax.swing.JMenu();
        jMenuItemThemes = new javax.swing.JMenuItem();
        jMenuSet = new javax.swing.JMenu();
        jMenuItemOptions = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemHelp = new javax.swing.JMenuItem();

        jProgressBar2.setBackground(new java.awt.Color(35, 36, 56));
        jProgressBar2.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jProgressBar2.setForeground(new java.awt.Color(207, 104, 126));
        jProgressBar2.setToolTipText("");
        jProgressBar2.setValue(47);
        jProgressBar2.setAlignmentX(0.0F);
        jProgressBar2.setAlignmentY(0.0F);
        jProgressBar2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(207, 104, 126), 3));
        jProgressBar2.setOpaque(true);
        jProgressBar2.setStringPainted(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mediator");
        setBackground(new java.awt.Color(19, 20, 33));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(19, 20, 33));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 600));

        jContentPane.setBackground(new java.awt.Color(19, 20, 33));
        jContentPane.setForeground(new java.awt.Color(255, 255, 255));

        jFolderList.setBackground(new java.awt.Color(35, 36, 56));
        jFolderList.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jFolderList.setForeground(new java.awt.Color(255, 255, 255));
        jFolderList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jFolderList.setToolTipText("");
        jFolderList.setSelectionBackground(new java.awt.Color(207, 104, 126));
        jFolderList.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jFolderListPropertyChange(evt);
            }
        });
        jFolderList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jFolderListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jFolderList);

        jGroupHeader1.setBackground(new java.awt.Color(35, 36, 56));
        jGroupHeader1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(130, 135, 144)));

        jProgressBar.setBackground(new java.awt.Color(35, 36, 56));
        jProgressBar.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jProgressBar.setForeground(new java.awt.Color(207, 104, 126));
        jProgressBar.setToolTipText("");
        jProgressBar.setValue(47);
        jProgressBar.setAlignmentX(0.0F);
        jProgressBar.setAlignmentY(0.0F);
        jProgressBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(207, 104, 126), 3));
        jProgressBar.setOpaque(true);
        jProgressBar.setStringPainted(true);

        jComboBoxSearchType.setBackground(new java.awt.Color(240, 240, 240));
        jComboBoxSearchType.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jComboBoxSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Title", "Creator", "Year" }));
        jComboBoxSearchType.setBorder(null);
        jComboBoxSearchType.setOpaque(false);

        jbtnSearch.setBackground(new java.awt.Color(62, 144, 197));
        jbtnSearch.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jbtnSearch.setForeground(new java.awt.Color(255, 255, 255));
        jbtnSearch.setText("Search");
        jbtnSearch.setBorderPainted(false);
        jbtnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSearchActionPerformed(evt);
            }
        });

        jbtnAddGroup.setBackground(new java.awt.Color(62, 144, 197));
        jbtnAddGroup.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jbtnAddGroup.setForeground(new java.awt.Color(255, 255, 255));
        jbtnAddGroup.setText("Add Group");
        jbtnAddGroup.setBorderPainted(false);
        jbtnAddGroup.setMargin(new java.awt.Insets(2, 7, 2, 7));
        jbtnAddGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddGroupActionPerformed(evt);
            }
        });

        jbtnRenameGroup.setBackground(new java.awt.Color(62, 144, 197));
        jbtnRenameGroup.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jbtnRenameGroup.setForeground(new java.awt.Color(255, 255, 255));
        jbtnRenameGroup.setText("Rename Group");
        jbtnRenameGroup.setBorderPainted(false);
        jbtnRenameGroup.setMargin(new java.awt.Insets(2, 7, 2, 7));
        jbtnRenameGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRenameGroupActionPerformed(evt);
            }
        });

        jbtnRemoveGroup.setBackground(new java.awt.Color(62, 144, 197));
        jbtnRemoveGroup.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jbtnRemoveGroup.setForeground(new java.awt.Color(255, 255, 255));
        jbtnRemoveGroup.setText("Remove Group");
        jbtnRemoveGroup.setToolTipText("");
        jbtnRemoveGroup.setBorderPainted(false);
        jbtnRemoveGroup.setMargin(new java.awt.Insets(2, 7, 2, 7));
        jbtnRemoveGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRemoveGroupActionPerformed(evt);
            }
        });

        jbtnAddEntry.setBackground(new java.awt.Color(62, 144, 197));
        jbtnAddEntry.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jbtnAddEntry.setForeground(new java.awt.Color(255, 255, 255));
        jbtnAddEntry.setText("Add Entry");
        jbtnAddEntry.setBorderPainted(false);
        jbtnAddEntry.setMargin(new java.awt.Insets(2, 7, 2, 7));
        jbtnAddEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddEntryActionPerformed(evt);
            }
        });

        jbtnEditEntry.setBackground(new java.awt.Color(62, 144, 197));
        jbtnEditEntry.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jbtnEditEntry.setForeground(new java.awt.Color(255, 255, 255));
        jbtnEditEntry.setText("Edit Entry");
        jbtnEditEntry.setBorderPainted(false);
        jbtnEditEntry.setMargin(new java.awt.Insets(2, 7, 2, 7));
        jbtnEditEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEditEntryActionPerformed(evt);
            }
        });

        jbtnRemoveEntry.setBackground(new java.awt.Color(62, 144, 197));
        jbtnRemoveEntry.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jbtnRemoveEntry.setForeground(new java.awt.Color(255, 255, 255));
        jbtnRemoveEntry.setText("Remove Entry");
        jbtnRemoveEntry.setBorderPainted(false);
        jbtnRemoveEntry.setMargin(new java.awt.Insets(2, 7, 2, 7));
        jbtnRemoveEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRemoveEntryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jGroupHeader1Layout = new javax.swing.GroupLayout(jGroupHeader1);
        jGroupHeader1.setLayout(jGroupHeader1Layout);
        jGroupHeader1Layout.setHorizontalGroup(
            jGroupHeader1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jGroupHeader1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jGroupHeader1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jGroupHeader1Layout.createSequentialGroup()
                        .addComponent(jbtnAddGroup)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnRenameGroup)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnRemoveGroup)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                        .addComponent(jbtnAddEntry)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnEditEntry)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnRemoveEntry))
                    .addGroup(jGroupHeader1Layout.createSequentialGroup()
                        .addComponent(jTextFieldSearchBar)
                        .addGap(0, 0, 0)
                        .addComponent(jComboBoxSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbtnSearch)))
                .addContainerGap())
        );
        jGroupHeader1Layout.setVerticalGroup(
            jGroupHeader1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jGroupHeader1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jGroupHeader1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnSearch)
                    .addComponent(jComboBoxSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jGroupHeader1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jGroupHeader1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbtnRenameGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnAddGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnRemoveGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jGroupHeader1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbtnAddEntry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnEditEntry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnRemoveEntry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jScrollPane1.setBackground(new java.awt.Color(35, 36, 56));
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));

        jTable.setBackground(new java.awt.Color(35, 36, 56));
        jTable.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jTable.setForeground(new java.awt.Color(255, 255, 255));
        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jTable.setAutoscrolls(false);
        jTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable.setFillsViewportHeight(true);
        jTable.setGridColor(new java.awt.Color(35, 36, 56));
        jTable.setInheritsPopupMenu(true);
        jTable.setSelectionBackground(new java.awt.Color(207, 104, 126));
        jTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable.setShowHorizontalLines(false);
        jScrollPane1.setViewportView(jTable);

        jRecTextArea.setEditable(false);
        jRecTextArea.setBackground(new java.awt.Color(35, 36, 56));
        jRecTextArea.setColumns(20);
        jRecTextArea.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jRecTextArea.setForeground(new java.awt.Color(255, 255, 255));
        jRecTextArea.setLineWrap(true);
        jRecTextArea.setRows(5);
        jRecTextArea.setText("Hello, it looks like you haven't listened to Pink Floyd - The Wall (1979) yet, do you want to attempt it?");
        jRecTextArea.setWrapStyleWord(true);
        jScrollPane3.setViewportView(jRecTextArea);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Recommendation");

        jbtnRefresh.setBackground(new java.awt.Color(62, 144, 197));
        jbtnRefresh.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jbtnRefresh.setForeground(new java.awt.Color(255, 255, 255));
        jbtnRefresh.setText("Refresh");
        jbtnRefresh.setBorderPainted(false);
        jbtnRefresh.setMargin(new java.awt.Insets(2, 7, 2, 7));
        jbtnRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbtnRefreshMouseClicked(evt);
            }
        });
        jbtnRefresh.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbtnRefreshKeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Group List");

        jLabelGroupName.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabelGroupName.setForeground(new java.awt.Color(255, 255, 255));
        jLabelGroupName.setText("GROUP: ");

        jTextFieldID.setText("jTextField2");
        jTextFieldID.setOpaque(false);

        javax.swing.GroupLayout jContentPaneLayout = new javax.swing.GroupLayout(jContentPane);
        jContentPane.setLayout(jContentPaneLayout);
        jContentPaneLayout.setHorizontalGroup(
            jContentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jContentPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jContentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jContentPaneLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jContentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jGroupHeader1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jContentPaneLayout.createSequentialGroup()
                        .addComponent(jLabelGroupName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(105, 105, 105)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jContentPaneLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jContentPaneLayout.setVerticalGroup(
            jContentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jContentPaneLayout.createSequentialGroup()
                .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(jContentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(jLabelGroupName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jContentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jContentPaneLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addGroup(jContentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbtnRefresh)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3))
                    .addGroup(jContentPaneLayout.createSequentialGroup()
                        .addComponent(jGroupHeader1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jMenuBar.setBorder(null);
        jMenuBar.setName(""); // NOI18N

        jMenuFile.setText("File");

        jMenuItemExport.setText("Export Table");
        jMenuItemExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExportActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExport);

        jMenuItemRefresh.setText("Manual Table Refresh");
        jMenuItemRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRefreshActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemRefresh);

        jMenuBar.add(jMenuFile);

        jMenuEdit.setText("Edit");
        jMenuEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuEditActionPerformed(evt);
            }
        });

        jMenuItemNewEntry.setText("Create New Entry");
        jMenuItemNewEntry.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jMenuItemNewEntryStateChanged(evt);
            }
        });
        jMenuItemNewEntry.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItemNewEntryMouseClicked(evt);
            }
        });
        jMenuItemNewEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewEntryActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemNewEntry);

        jMenuItemEditEntry.setText("Edit Entry");
        jMenuItemEditEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditEntryActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemEditEntry);

        jMenuItemRemoveEntry.setText("Remove Entry");
        jMenuItemRemoveEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRemoveEntryActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemRemoveEntry);
        jMenuEdit.add(jSeparator2);

        jMenuItemNewGroup.setText("Create New Group");
        jMenuItemNewGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewGroupActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemNewGroup);

        jMenuItemRenameGroup.setText("Rename Group");
        jMenuItemRenameGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRenameGroupActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemRenameGroup);

        jMenuItemRemoveGroup.setText("Remove Group");
        jMenuItemRemoveGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRemoveGroupActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemRemoveGroup);

        jMenuBar.add(jMenuEdit);

        jMenuAppear.setText("Appearance");

        jMenuItemThemes.setText("Change Themes");
        jMenuItemThemes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemThemesActionPerformed(evt);
            }
        });
        jMenuAppear.add(jMenuItemThemes);

        jMenuBar.add(jMenuAppear);

        jMenuSet.setText("Settings");

        jMenuItemOptions.setText("ReEnable Hints on StartUp");
        jMenuItemOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOptionsActionPerformed(evt);
            }
        });
        jMenuSet.add(jMenuItemOptions);

        jMenuBar.add(jMenuSet);

        jMenuHelp.setText("Help");

        jMenuItemHelp.setText("Help");
        jMenuItemHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHelpActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemHelp);

        jMenuBar.add(jMenuHelp);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jContentPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jContentPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //SOME OF THE AUTOGENERATED FIELDS ARE UNUSED BUT WEREN'T ABLE TO BE REMOVED
    //IF A METHOD HAS A COMMENT ABOVE IT IT MEANS IT IS USED
    //
    //Remove Entry Button Pressed
    private void jbtnRemoveEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRemoveEntryActionPerformed
        removeEntry();
    }//GEN-LAST:event_jbtnRemoveEntryActionPerformed

    //Edit Entry Button Pressed
    private void jbtnEditEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEditEntryActionPerformed
        editEntry();
    }//GEN-LAST:event_jbtnEditEntryActionPerformed

    //Add Entry Button Pressed
    private void jbtnAddEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddEntryActionPerformed
        addEntry();
    }//GEN-LAST:event_jbtnAddEntryActionPerformed

    //Remove Group Button Pressed
    private void jbtnRemoveGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRemoveGroupActionPerformed
        removeGroup();
    }//GEN-LAST:event_jbtnRemoveGroupActionPerformed

    //Rename Group Button Pressed
    private void jbtnRenameGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRenameGroupActionPerformed
        editGroup();
    }//GEN-LAST:event_jbtnRenameGroupActionPerformed

    //Add Group Button Pressed
    private void jbtnAddGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddGroupActionPerformed
        addGroup();
    }//GEN-LAST:event_jbtnAddGroupActionPerformed

    //Search Button Pressed
    private void jbtnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSearchActionPerformed
        selectionList(true);
    }//GEN-LAST:event_jbtnSearchActionPerformed

    private void jFolderListPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jFolderListPropertyChange

    }//GEN-LAST:event_jFolderListPropertyChange

    //New Item in List Selected
    private void jFolderListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jFolderListValueChanged
        selectionList(false);
        jLabelGroupName.setText("GROUP: " + jFolderList.getSelectedValue());
        updatePercentage();
        jTextFieldSearchBar.setText(null);
    }//GEN-LAST:event_jFolderListValueChanged

    private void jbtnRefreshKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbtnRefreshKeyPressed

    }//GEN-LAST:event_jbtnRefreshKeyPressed

    //Refresh Recommendation Button Pressed
    private void jbtnRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbtnRefreshMouseClicked
        Recommendations rec = new Recommendations();
        jRecTextArea.setText(rec.getNewRecommendation());
    }//GEN-LAST:event_jbtnRefreshMouseClicked

    private void jMenuItemNewEntryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemNewEntryMouseClicked

    }//GEN-LAST:event_jMenuItemNewEntryMouseClicked

    private void jMenuItemNewEntryStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jMenuItemNewEntryStateChanged

    }//GEN-LAST:event_jMenuItemNewEntryStateChanged

    private void jMenuEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuEditActionPerformed

    }//GEN-LAST:event_jMenuEditActionPerformed

    //Edit>Edit Entry Pressed
    private void jMenuItemEditEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditEntryActionPerformed
        editEntry();
    }//GEN-LAST:event_jMenuItemEditEntryActionPerformed

    //Edit>Add Entry Pressed
    private void jMenuItemNewEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewEntryActionPerformed
        addEntry();
    }//GEN-LAST:event_jMenuItemNewEntryActionPerformed

    //Edit>Remove Entry Pressed
    private void jMenuItemRemoveEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRemoveEntryActionPerformed
        removeEntry();
    }//GEN-LAST:event_jMenuItemRemoveEntryActionPerformed

    //Edit>New Group Pressed
    private void jMenuItemNewGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewGroupActionPerformed
        addGroup();
    }//GEN-LAST:event_jMenuItemNewGroupActionPerformed

    //Edit>Rename Group Pressed
    private void jMenuItemRenameGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRenameGroupActionPerformed
        editGroup();
    }//GEN-LAST:event_jMenuItemRenameGroupActionPerformed

    //Edit>Remove Group Pressed
    private void jMenuItemRemoveGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRemoveGroupActionPerformed
        removeGroup();
    }//GEN-LAST:event_jMenuItemRemoveGroupActionPerformed

    //Help>Help Pressed
    private void jMenuItemHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHelpActionPerformed
        try {
            File file = new File("help.txt");
            Desktop dsk = Desktop.getDesktop();
            if (file.exists()) {
                dsk.open(file);
            }
            //Simply opens up the Help file to give a quick FAQ.
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "The help.txt was not found. It may have been renamed, moved or deleted.");
        }
    }//GEN-LAST:event_jMenuItemHelpActionPerformed

    //Settings>ReEnable Hints Pressed
    private void jMenuItemOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOptionsActionPerformed
        hints = true;
        writeToSettings();
    }//GEN-LAST:event_jMenuItemOptionsActionPerformed
    ///File>Export Pressed
    private void jMenuItemExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExportActionPerformed
        createExportedFile();
    }//GEN-LAST:event_jMenuItemExportActionPerformed
    //Appearance>Change Themes Pressed;
    private void jMenuItemThemesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemThemesActionPerformed
        appearance = !appearance;
        writeToSettings();
        recolourTheme();
        selectionList(false); //resets search
    }//GEN-LAST:event_jMenuItemThemesActionPerformed

    private void jMenuItemRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRefreshActionPerformed
        selectionList(false);
        updatePercentage();
    }//GEN-LAST:event_jMenuItemRefreshActionPerformed

    /**
     * Loads every existing group into jFolderList.
     */
    private void loadList() {
        EntryGroupConnection egc = new EntryGroupConnection();
        jFolderList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = egc.getGroupsAsText();

            @Override
            public int getSize() {
                return strings.length;
            }

            @Override
            public String getElementAt(int i) {
                return strings[i];
            }
        });
    }

    /**
     * Creates the jTable.
     */
    private void setupTable(Entry[] data) {
        TableColumn tcol;
        jScrollPane1.remove(jTable);

        String col[] = {"ID", "", "Title", "Creator", "Year", "Progress"};

        DefaultTableModel model = new DefaultTableModel(null, col);

        table = new JTable(model);
        table.setRowHeight(20);
        table.getColumnModel().getColumn(0).setMaxWidth(40);
        table.getColumnModel().getColumn(1).setMaxWidth(20);
        table.getColumnModel().getColumn(4).setMaxWidth(40);
        table.setSelectionBackground(new Color(207, 104, 126));
        table.setSelectionForeground(new Color(255, 255, 255));
        table.setFillsViewportHeight(true);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        JTableHeader header = table.getTableHeader();
        header.setBackground(new Color(255, 255, 255));

        for (int i = 0; i < 5; i++) {
            tcol = table.getColumnModel().getColumn(i);
            tcol.setCellRenderer(new CustomCellToolTipRenderer());
        }

        tcol = table.getColumnModel().getColumn(1);
        tcol.setCellRenderer(new CustomCellImageRenderer());

        tcol = table.getColumnModel().getColumn(5);
        tcol.setCellRenderer(new CustomCellProgressBarRenderer());

        jScrollPane1.add(table);
        jScrollPane1.setViewportView(table);

        if (appearance) {
            table.setBackground(new Color(240, 240, 240));
            table.setForeground(new Color(10, 10, 10));
            table.setGridColor(new Color(240, 240, 240));
        } else {
            table.setBackground(new Color(35, 36, 56));
            table.setForeground(new Color(255, 255, 255));
            table.setGridColor(new Color(35, 36, 56));
        }

        for (int i = 0; i < data.length; i++) {
            model.addRow(data);
            Entry row = data[i];
            model.setValueAt(row.getId(), i, 0);
            model.setValueAt(row.getType(), i, 1);
            model.setValueAt(row.getTitle(), i, 2);
            model.setValueAt(row.getCreator(), i, 3);
            model.setValueAt(row.getYear(), i, 4);
            model.setValueAt(Integer.toString(((int) row.getPercentage())), i, 5);
        }

    }

    // <editor-fold defaultstate="collapsed" desc="Complex jTable Stuff That I Struggle To Comprehend"> 
    
    /*MULTIPLE resources were used to make this and setupTable() functional such as
    https://coderanch.com/t/637113/java/Custom-JTable-Renderer-Cell-Editor
    https://stackoverflow.com/questions/12020597/java-convert-image-to-icon-imageicon
    https://www.pekalicious.com/blog/custom-jpanel-cell-with-jbuttons-in-jtable/
    https://stackoverflow.com/questions/9467093/how-to-add-a-tooltip-to-a-cell-in-a-jtable
    So if I seem like I don't know what's happening, that's why.
    */
    /**
     * Creates a custom cell to display a type image
     */
    private class CustomCellImageRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object obj, boolean isSelected, boolean hasFocus, int row, int column) {

            JLabel jLabelType = new JLabel();
            try {
                String url = "src/images/";
                switch ((String) obj) {
                    case "Music":
                        url += "mu.png";
                        break;
                    case "Film":
                        url += "fi.png";
                        break;
                    case "TV":
                        url += "tv.png";
                        break;
                    case "Book":
                        url += "bo.png";
                        break;
                    case "Video Game":
                        url += "ga.png";
                        break;
                    default:
                        url += "mu.png";
                }
                Image img = ImageIO.read(new File(url));
                ImageIcon icon = new ImageIcon(img);
                jLabelType.setIcon(icon);
                //I was conflicted whether to create light/dark mode variants but I settled on a gray icon instead.
                //Works against both modes.
            } catch (IOException e) {
                jLabelType.setText((String) obj);
            }
            return jLabelType;
        }
    }

    /**
     * Creates a custom cell to display a progress bar
     */
    private class CustomCellProgressBarRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object obj, boolean isSelected, boolean hasFocus, int row, int column) {
            JProgressBar bar = jProgressBar2;
            if (appearance) {
                bar.setBackground(new Color(240, 240, 240));
            } else {
                bar.setBackground(new Color(35, 36, 56));
            }
            bar.setValue(Integer.parseInt((String) (obj)));
            return bar;
        }
    }

    /**
     * Creates a tool tip display for additional information when hovered over.
     */
    private class CustomCellToolTipRenderer extends DefaultTableCellRenderer {
        //The original draft included an "expand table" button which I removed in favor of this
        //If you keep your cursor over an entry, it shows that additional information that Expand Table would've shown.
        //It's not perfect, especially considering toString() was built with newlines and tabs in mind, but I perfer this solution
        @Override
        public Component getTableCellRendererComponent(JTable table, Object obj, boolean isSelected, boolean hasFocus, int row, int column) {
            JLabel c = (JLabel) super.getTableCellRendererComponent(table, obj, isSelected, hasFocus, row, column);
            String text = new Entry((int) table.getValueAt(row, 0)).toString();
            c.setToolTipText(text.substring(text.indexOf("}") + 1));
            return c;
        }
    }// </editor-fold>   

    /**
     * Fills the jTable with all the entries from a given group ID.
     *
     * @param grpID
     */
    private void refreshTable(int grpID) {
        EntryGroupConnection egc = new EntryGroupConnection();
        int len = egc.getGrpChildren(grpID).length;
        Entry[] data = new Entry[len];
        for (int i = 0; i < len; i++) {
            data[i] = new Entry(egc.getGrpChildren(grpID)[i]);
        }
        setupTable(data);
    }

    /**
     * Fills the jTable with all the entries from a given group ID, with the
     * additional search functionality to filter out results.
     *
     * @param grpID
     * @param search
     * @param type
     */
    private void refreshTableSearch(int grpID, String search, String type) {
        EntryGroupConnection egc = new EntryGroupConnection();
        int len = egc.getGrpChildren(grpID).length;
        int j = 0;
        Entry[] dataBefore = new Entry[len];
        int internalCount = 0;
        for (int i = 0; i < len; i++) {
            Entry row = new Entry(egc.getGrpChildren(grpID)[i]);
            if (("Title".equals(type) && row.getTitle().contains(search))
                    || ("Creator".equals(type) && row.getCreator().contains(search))
                    || ("Year".equals(type) && row.getYear().contains(search))) {
                dataBefore[internalCount] = new Entry(egc.getGrpChildren(grpID)[i]);
                j++;
                internalCount++;
            }
        }
        Entry[] dataAfter = new Entry[j];
        for (int i = 0; i < j; i++) {
            dataAfter[i] = dataBefore[i];
        }
        setupTable(dataAfter);
    }

    /**
     * Reloads jProgressBar with the average completion percentage of the
     * selected group.
     */
    private void updatePercentage() {
        EntryGroupConnection egc = new EntryGroupConnection();
        int perc;
        if (jFolderList.getSelectedIndex() < 6) {
            perc = (int) Math.round(egc.calcAvgPercentage(jFolderList.getSelectedIndex() - 6));
        } else {
            perc = (int) Math.round(egc.calcAvgPercentage(Integer.parseInt(jFolderList.getSelectedValue().substring(3, jFolderList.getSelectedValue().indexOf(")")))));
        }
        jProgressBar.setValue(perc);
    }

    /**
     * Finds out which list entry is selected and refreshes the table according
     * to the given ID. -6 to -1 are reserved for the special types, while the
     * rest are for the actual groupIDs.
     *
     * @param searching - Determines whether the table is refreshed with
     * filtered results (true) or not (false)
     */
    private void selectionList(boolean searching) {
        if (!searching) {
            if (jFolderList.getSelectedIndex() > 5) {
                int id = Integer.parseInt(jFolderList.getSelectedValue().substring(3, jFolderList.getSelectedValue().indexOf(")")));
                refreshTable(id);
            } else {
                refreshTable(jFolderList.getSelectedIndex() - 6);
            }
        } else {
            if (jFolderList.getSelectedIndex() > 5) {
                int id = Integer.parseInt(jFolderList.getSelectedValue().substring(3, jFolderList.getSelectedValue().indexOf(")")));
                refreshTableSearch(id, jTextFieldSearchBar.getText(), jComboBoxSearchType.getItemAt(jComboBoxSearchType.getSelectedIndex()));
            } else {
                refreshTableSearch(jFolderList.getSelectedIndex() - 6, jTextFieldSearchBar.getText(), jComboBoxSearchType.getItemAt(jComboBoxSearchType.getSelectedIndex()));
            }
        }
    }

    /**
     * Loads the EntryUI as a new entry.
     */
    private void addEntry() {
        EntryUI enn = new EntryUI();
        enn.setVisible(true);
    }

    /**
     * Loads the EntryUI to edit existing data.
     */
    private void editEntry() {
        if (table.getSelectedRow() != -1) {
            EntryUI enn = new EntryUI((int) (table.getValueAt(table.getSelectedRow(), 0)));
            enn.setVisible(true);
        }
    }

    /**
     * Creates a dialog box to confirm deletion of an entry.
     */
    private void removeEntry() {
        if (JOptionPane.showConfirmDialog(null, "Do you want to remove this entry entirely from the database?") == JOptionPane.YES_OPTION) {
            try {
                Database db = new Database();
                db.removeEntry((int) (table.getValueAt(table.getSelectedRow(), 0)));
                selectionList(false);
                JOptionPane.showMessageDialog(null, "Entry was removed successfully");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }

    /**
     * Creates a dialog box to add a new group.
     */
    private void addGroup() {
        String newGrpName = JOptionPane.showInputDialog("Add Group");
        if (newGrpName != null) {
            if (!newGrpName.isEmpty()) {
                try {
                    Group newGroup = new Group();
                    newGroup.setName(newGrpName);
                    Database db = new Database();
                    db.addGroup(newGroup);
                    loadList();
                    JOptionPane.showMessageDialog(null, "Group was added successfully");
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Connection Failed");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No group was added, field was empty.");
            }
        }
    }

    /**
     * Creates a dialog box to rename an already existing group.
     */
    private void editGroup() {
        if (jFolderList.getSelectedIndex() > 5) {
            String renameGrp = JOptionPane.showInputDialog("Rename Group");
            if (renameGrp != null) {
                if (!renameGrp.isEmpty()) {
                    try {
                        System.out.println(Integer.parseInt(jFolderList.getSelectedValue().substring(3, jFolderList.getSelectedValue().indexOf(")"))));
                        Group exisGroup = new Group(Integer.parseInt(jFolderList.getSelectedValue().substring(3, jFolderList.getSelectedValue().indexOf(")"))));
                        exisGroup.setName(renameGrp);
                        Database db = new Database();
                        db.updateGroup(exisGroup);
                        loadList();
                        JOptionPane.showMessageDialog(null, "Group was renamed successfully");
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "The group cannot be renamed to nothing.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "A type category can't be renamed.");
        }
    }

    /**
     * Creates a dialog box to ask for the removal of a group.
     */
    private void removeGroup() {
        if (jFolderList.getSelectedIndex() > 5) {
            if (JOptionPane.showConfirmDialog(null, "Do you want to remove this group and all its linked connections?") == JOptionPane.YES_OPTION) {
                try {
                    Group exisGroup = new Group(Integer.parseInt(jFolderList.getSelectedValue().substring(3, jFolderList.getSelectedValue().indexOf(")"))));
                    Database db = new Database();
                    db.removeGroup(exisGroup.getId());
                    jFolderList.setSelectedIndex(0);
                    loadList();
                    JOptionPane.showMessageDialog(null, "Group was successfully removed");
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "A type category can't be removed.");
        }
    }

    /**
     * Takes in settings.txt and loads in the two preferences for hints and
     * light/dark mode.
     */
    private void loadSettings() {
        File settings = new File("settings.txt");
        try {
            Scanner scFile = new Scanner(settings).useDelimiter(", ");
            hints = scFile.nextBoolean();
            appearance = scFile.nextBoolean();
            scFile.close();
        } catch (FileNotFoundException | NoSuchElementException ex) {
            hints = true;
            appearance = false;
            writeToSettings();
            //if the file is not found or corrupted, the default is startup hints shown and dark mode.
        }
    }

    /**
     * Writes to the setting file when updating the settings or in the case of a
     * missing file.
     */
    private void writeToSettings() {
        FileWriter writer;
        try {
            writer = new FileWriter("settings.txt");
            writer.write(hints + ", " + appearance);
            writer.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    /**
     * A massive String array being displayed as dialog boxes at the start of
     * the program to inform the user of functions. Hints are disabled if
     * no/cancel is selected or the user reaches the end of it.
     */
    public void startUpHints() {
        //The reason it is public is that visibility needs to be set to true, else only this
        //appears instead of the program, but setting visiability is done by Mediator.java, so
        //that needs to access this program,
        if (hints) {
            //Using a string array allows me to embed these instructions directly into code without
            //the need of a file.
            String[] hintsList = {
                "(1/6) Welcome to Mediator! These hints serve to give you a quick rundown of the program!\n"
                + "If you do not want to see it, click on No/Cancel to disable them.",
                "(2/6) This program allows you to add, edit, group, track, and remove media you've consumed using a few simple functions:\n"
                + "Add Entry - creates a new pop up window to add a new entry\n"
                + "Edit Entry - selecting on a given entry and then edit entry will allow you to edit to information\n"
                + "Remove Entry - allows you to remove an entry.",
                "(3/6) One of the main functions of the program is the groupings and the ways you can manipulat it\n"
                + "To select all entries in a given group, just select the corresponding group from the list\n"
                + "One of the most important aspects is the ID, indicted in brackets next to the name in the list.\n"
                + "Add Group - allow you to name a new group\n"
                + "Edit Group - allows you to rename a group\n"
                + "Remove Group - gets rid of the group and all the connections to entries",
                "(4/6) Some addition functions include:\n"
                + "Search - allowing you to filter down a table to search a specfic thing\n"
                + "Appearance>Change Themes - allows you to swap between dark mode and light mode\n"
                + "Help - allows you to consult to help text file for common issues\n"
                + "Recommendation - by hitting refresh, the program returns a recomendation for you\n"
                + "File>Export - allows you to export your selected group into a prettier file\n"
                + "File>Manual Table Refresh - allows you to quickly reset the table, especially if the program tells you so.",
                "(5/6) Those are the gist of the main functions, however there are some additional info to understand:\n"
                + "-When submitting an entry, it must have a title, creator and year\n"
                + "-The groups table MUST be formatted using the group IDs as \"23 12 14\", with the numbers corresponding to groups\n"
                + "   with spaces seperating them. NOTHING else will be accepted.\n"
                + "-Avoid tampering with the files directly. The program has been built to withstand some corruptions but not all\n"
                + "   so please avoid renaming, removing, or editing files. Creating a backup is highly recommended.\n"
                + "-If you hover your mouse over an entry in the table, extra information will be revealed in the tooltip.",
                "(6/6) That is all you need to know for now! Hope you find Mediator of use!"
            };
            for (int i = 0; i < hintsList.length; i++) {
                if (JOptionPane.showConfirmDialog(null, hintsList[i]) != JOptionPane.YES_OPTION) {
                    hints = false;
                    writeToSettings();
                    break;
                }
            }
            hints = false;
            writeToSettings();
        }
    }

    /**
     * Allows the user to export a given table result as a text file.
     */
    private void createExportedFile() {
        JFrame parentComponent = new JFrame();
        JFileChooser fileChooser = new JFileChooser();
        int returnVal = fileChooser.showOpenDialog(parentComponent);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File exportFile = fileChooser.getSelectedFile();
            if (!exportFile.getAbsolutePath().endsWith(".txt")) {
                exportFile = new File(exportFile.getAbsolutePath() + ".txt");
            }
            try {
                FileWriter exportWrite = new FileWriter(exportFile);
                exportWrite.write("<<" + jFolderList.getSelectedValue() + ">>\n\n");
                for (int i = 0; i < table.getRowCount(); i++) {
                    Entry en = new Entry((int) table.getValueAt(i, 0));
                    EntryGroupConnection egc = new EntryGroupConnection();
                    exportWrite.write(en.toString());
                    exportWrite.write("GROUPS: " + egc.getEntParentsAsText(en.getId()) + "\n");
                }
                exportWrite.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }

    /**
     * Recolours the components to either be light or dark mode.
     */
    private void recolourTheme() {
        Color lightBack;
        Color lightBack2;
        Color lightFore;
        if (appearance) {
            lightBack = new Color(255, 255, 255);
            lightBack2 = new Color(240, 240, 240);
            lightFore = new Color(10, 10, 10);
        } else {
            lightBack = new Color(19, 20, 33);
            lightBack2 = new Color(35, 36, 56);
            lightFore = new Color(255, 255, 255);
        }

        jContentPane.setBackground(lightBack);

        jFolderList.setBackground(lightBack2);
        jFolderList.setForeground(lightFore);
        jRecTextArea.setBackground(lightBack2);
        jRecTextArea.setForeground(lightFore);
        jGroupHeader1.setBackground(lightBack2);
        jGroupHeader1.setForeground(lightFore);

        jProgressBar.setBackground(lightBack2);

        jLabelGroupName.setForeground(lightFore);
        jLabel1.setForeground(lightFore);
        jLabel2.setForeground(lightFore);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBoxSearchType;
    private javax.swing.JPanel jContentPane;
    private javax.swing.JList<String> jFolderList;
    private javax.swing.JPanel jGroupHeader1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelGroupName;
    private javax.swing.JMenu jMenuAppear;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItemEditEntry;
    private javax.swing.JMenuItem jMenuItemExport;
    private javax.swing.JMenuItem jMenuItemHelp;
    private javax.swing.JMenuItem jMenuItemNewEntry;
    private javax.swing.JMenuItem jMenuItemNewGroup;
    private javax.swing.JMenuItem jMenuItemOptions;
    private javax.swing.JMenuItem jMenuItemRefresh;
    private javax.swing.JMenuItem jMenuItemRemoveEntry;
    private javax.swing.JMenuItem jMenuItemRemoveGroup;
    private javax.swing.JMenuItem jMenuItemRenameGroup;
    private javax.swing.JMenuItem jMenuItemThemes;
    private javax.swing.JMenu jMenuSet;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JTextArea jRecTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTable jTable;
    private javax.swing.JTextField jTextFieldID;
    private javax.swing.JTextField jTextFieldSearchBar;
    private javax.swing.JButton jbtnAddEntry;
    private javax.swing.JButton jbtnAddGroup;
    private javax.swing.JButton jbtnEditEntry;
    private javax.swing.JButton jbtnRefresh;
    private javax.swing.JButton jbtnRemoveEntry;
    private javax.swing.JButton jbtnRemoveGroup;
    private javax.swing.JButton jbtnRenameGroup;
    private javax.swing.JButton jbtnSearch;
    // End of variables declaration//GEN-END:variables

}
